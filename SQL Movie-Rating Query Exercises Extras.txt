1.Find the names of all reviewers who rated Gone with the Wind.
SELECT DISTINCT name
FROM Movie
INNER JOIN Rating USING(mId)
INNER JOIN Reviewer USING(rId)
WHERE title = "Gone with the Wind";

2.For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.
SELECT name, title, stars
FROM Movie
INNER JOIN Rating USING(mId)
INNER JOIN Reviewer USING(rId)
WHERE director = name;

3.Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".)
SELECT title FROM Movie
UNION
SELECT name FROM Reviewer
ORDER BY name, title;

4.Find the titles of all movies not reviewed by Chris Jackson.
SELECT Title 
FROM Movie
WHERE mId NOT IN 
(
	SELECT mID 
	FROM Rating
	INNER JOIN Reviewer USING(rID) 
	WHERE name = "Chris Jackson"
);

5.For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.
SELECT DISTINCT R3.name, R4.name
FROM Rating as R1, Rating as R2, Reviewer as R3, Reviewer as R4
WHERE R1.rID = R3.rID
AND R2.rID = R4.rID
AND R1.mID = R2.mID
AND R3.name < R4.name
ORDER BY R3.name, R4.name;

6.For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.
SELECT name, title, stars
FROM Movie
INNER JOIN Rating USING(mID)
INNER JOIN Reviewer USING(rID)
WHERE stars = (
	SELECT Min(stars)
	FROM Rating
);

7.List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order.
SELECT title, AVG(stars) AS average
FROM Movie
INNER JOIN Rating USING(mId)
GROUP BY mId
ORDER BY average DESC, title;

8.Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.)
SELECT name
FROM Reviewer
WHERE (
	SELECT COUNT(*)
	FROM Rating
	WHERE Rating.rID = Reviewer.rID
) >= 3

9.Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.)
SELECT title, director
FROM Movie as M1
WHERE (
	SELECT COUNT(*)
	FROM Movie as M2
	WHERE M1.director = M2.director
) > 1
ORDER BY director, title;

10.Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)
SELECT Title, AVG(stars) average
FROM Movie
INNER JOIN Rating USING(mID)
GROUP BY mId
HAVING average = (
  SELECT MAX(average_stars)
  FROM (
    SELECT title, AVG(stars) average_stars
    FROM Movie
    INNER JOIN Rating USING(mId)
    GROUP BY mId
  )
);